using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Identity;        // Qu·∫£n l√Ω ng∆∞·ªùi d√πng (t·∫°o t√†i kho·∫£n, l∆∞u th√¥ng tin).
using System.Security.Claims;               // L∆∞u th√¥ng tin b·ªï sung c·ªßa ng∆∞·ªùi d√πng (nh∆∞ t√™n ƒë·∫ßy ƒë·ªß).
using IdentityModel;
using IdentityService.Models;

namespace IdentityService.Pages.Register
{
    [SecurityHeaders]
    [AllowAnonymous]    // Cho ph√©p b·∫•t k·ª≥ ai c≈©ng c√≥ th·ªÉ truy c·∫≠p

    // PageModel: l·ªõp c∆° s·ªü c·ªßa Razor Pages
    public class Index : PageModel
    {
        // userManager: t·∫°o v√† qu·∫£n l√Ω user.
        private readonly UserManager<ApplicationUser> _userManager;


        // Constructor: kh·ªüi t·∫°o _userManager t·ª´ ƒë·ªëi t∆∞·ª£ng UserManager nh·∫≠n v√†o
        // UserManager use ApplicationUser type

        public Index(UserManager<ApplicationUser> userManager, SignInManager<ApplicationUser> signInManager)
        {
            _userManager = userManager;

        }

        // Li√™n k·∫øt d·ªØ li·ªáu t·ª´ form HTML v·ªõi c√°c thu·ªôc t√≠nh 
        // Display property (information) when user registered successfully
        [BindProperty]

        // Ch·ª©a th√¥ng tin ng∆∞·ªùi d√πng nh·∫≠p v√†o
        public RegisterViewModel Input { get; set; }

        [BindProperty]
        public bool RegisterSuccess { get; set; }

        // OnGet: ƒê∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng truy c·∫≠p trang ƒëƒÉng k√Ω (HTTP GET).
        // returnUrl: n∆°i ng∆∞·ªùi d√πng s·∫Ω ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng sau khi ƒëƒÉng k√Ω
        public IActionResult OnGet(string returnUrl)
        {
            if (Input == null) // üëà Ki·ªÉm tra n·∫øu Input ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o
            {
                Input = new RegisterViewModel
                {
                    ReturnUrl = returnUrl
                };
            }
            // RegisterViewModel: L·ªõp l∆∞u tr·ªØ d·ªØ li·ªáu t·ª´ form ƒëƒÉng k√Ω m√† ng∆∞·ªùi d√πng nh·∫≠p v√†o
            Input = new RegisterViewModel
            {
                ReturnUrl = returnUrl
            };

            // Tr·∫£ v·ªÅ trang ƒëƒÉng k√Ω ƒë·ªÉ hi·ªÉn th·ªã form cho ng∆∞·ªùi d√πng
            // Page(): thu·ªôc l·ªõp PageModel (l·ªõp c∆° s·ªü m√† l·ªõp Index k·∫ø th·ª´a)
            // Khi g·ªçi Page(), n√≥ y√™u c·∫ßu h·ªá th·ªëng t·∫°o ra n·ªôi dung HTML c·ªßa Razor Page t∆∞∆°ng ·ª©ng (·ªü ƒë√¢y l√† file .cshtml) v√† g·ª≠i v·ªÅ tr√¨nh duy·ªát.
            return Page();
        }

        // OnPost: ƒê∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng g·ª≠i form ƒëƒÉng k√Ω
        public async Task<IActionResult> OnPost()
        {
            if (Input == null)
            {
                Input = new RegisterViewModel();
            }

            // N√∫t Button: SignUp, SignIn
            if (Input.Button != "SignUp")
                // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß
                return Redirect("~/");

            // Ki·ªÉm tra ƒë·ªãnh d·∫°ng c·ªßa d·ªØ li·ªáu nh·∫≠p v√†o c√≥ h·ª£p l·ªá hay kh√¥ng
            // (t√™n, email, m·∫≠t kh·∫©u)
            if (ModelState.IsValid)
            {
                // T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng ApplicationUser (ƒë·ªëi t∆∞·ª£ng ng∆∞·ªùi d√πng trong CSDL) v·ªõi th√¥ng tin t·ª´ Input
                var user = new ApplicationUser
                {
                    FullName = Input.FullName,
                    UserName = Input.UserName,
                    Email = Input.Email,
                    Address = Input.Address,
                    PhoneNumber = Input.Telephone,
                    EmailConfirmed = true,
                    PhoneNumberConfirmed = true
                };

                // _userManager.CreateAsync: L∆∞u th√¥ng tin ng∆∞·ªùi d√πng v√† m·∫≠t kh·∫©u v√†o c∆° s·ªü d·ªØ li·ªáu.
                // await: Ch·ªù qu√° tr√¨nh ho√†n t·∫•t v√¨ ƒë√¢y l√† thao t√°c b·∫•t ƒë·ªìng b·ªô.       
                var result = await _userManager.CreateAsync(user, Input.PassWord);

                // Ki·ªÉm tra t√¨nh tr·∫°ng ƒëƒÉng k√Ω th√†nh c√¥ng hay kh√¥ng
                if (result.Succeeded)
                {
                    await _userManager.AddClaimsAsync(user, new Claim[]
                    {
                        new Claim(JwtClaimTypes.Name, Input.FullName)
                    });

                    RegisterSuccess = true;
                    return Redirect(Input.ReturnUrl); // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ch√≠nh ho·∫∑c URL tr∆∞·ªõc ƒë√≥
                }

            }
            else
            {

            }

            // Hi·ªÉn th·ªã l·∫°i trang ƒëƒÉng k√Ω (th√†nh c√¥ng / th·∫•t b·∫°i)
            return Page();
        }
    }
}

